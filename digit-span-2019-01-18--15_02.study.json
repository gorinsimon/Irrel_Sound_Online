{
  "components": {
    "1": {
      "id": "1",
      "type": "lab.html.Screen",
      "parameters": {
        "rows": [
          [
            {
              "name": "",
              "value": "",
              "type": "string"
            }
          ]
        ]
      },
      "responses": {
        "rows": [
          [
            "",
            "",
            "",
            ""
          ]
        ]
      },
      "messageHandlers": {
        "rows": [
          [
            {
              "title": "",
              "message": "",
              "code": ""
            }
          ]
        ]
      },
      "title": "Goodbye Screen",
      "content": "<header>\r\n  <p> Thank you for being in the experiment! </p>\r\n  </header>\r\n",
      "_tab": "Scripts",
      "timeout": "1000"
    },
    "2": {
      "id": "2",
      "type": "lab.html.Form",
      "content": "<main class=\"content-horizontal-center content-vertical-center\">\n  <div class=\"w-m text-left\">\n    <h2>Welcome!</h2>\n    <hr>\n    <p class=\"text-muted\">\n      Please allow the experimenter to enter\n      a participant <code>id</code>!\n    </p> \n    <form class=\"text-right\">\n      <input type=\"number\" name=\"participant_id\" class=\"w-100\">\n      <br>\n      <p class= \"text-muted\">\n        Please enter the name of the lab group. </p>\n        <input type=\"text\" name=\"lab_name\" autocomplete=\"off\">\n        <br>\n      <p class= \"text-muted\"> \n        Please enter the participant's age.</p>\n      <input type=\"number\" name=\"participant_age\">\n      <br>\n      <p class= \"text-muted\">\n        Please enter the participant's sex, using 1 = female, \n        2 = male, 3 = something else, 4 = I prefer not to say. </p>\n        <input type=\"number\" name=\"participant_sex\">\n        <br>\n\n      <button type=\"submit\">\n        Continue ?\n      </button>\n    </form>\n  </div>\n</main>",
      "parameters": {
        "rows": [
          [
            {
              "name": "",
              "value": "",
              "type": "string"
            }
          ]
        ]
      },
      "responses": {
        "rows": [
          [
            "",
            "",
            "",
            ""
          ]
        ]
      },
      "messageHandlers": {
        "rows": [
          [
            {
              "title": "",
              "message": "",
              "code": ""
            }
          ]
        ]
      },
      "title": "Participant ID"
    },
    "38": {
      "id": "38",
      "type": "lab.html.Frame",
      "context": "<main data-labjs-section=\"frame\">\n  <!-- Content gets inserted here -->\n</main>",
      "contextSelector": "[data-labjs-section=\"frame\"]",
      "parameters": {
        "rows": [
          [
            {
              "name": "",
              "value": "",
              "type": "string"
            }
          ]
        ]
      },
      "responses": {
        "rows": [
          [
            "",
            "",
            "",
            ""
          ]
        ]
      },
      "messageHandlers": {
        "rows": [
          [
            {
              "title": "prep",
              "message": "before:prepare",
              "code": "const sound = document.createElement('audio')\nsound.src = 'https://upload.wikimedia.org/wikipedia/de/9/91/Sin440HZ.ogg'\nsound.volume = 1\nthis.internals.sound = sound\nsound.loop = true\n"
            }
          ],
          [
            {
              "title": "play",
              "message": "run",
              "code": "this.internals.sound.play()"
            }
          ],
          [
            {
              "title": "stop sound file",
              "message": "end",
              "code": "this.internals.sound.pause()"
            }
          ]
        ]
      },
      "title": "HTML frame w/ sounds",
      "children": [
        "39"
      ],
      "_tab": "Scripts"
    },
    "39": {
      "id": "39",
      "type": "lab.flow.Loop",
      "children": [
        "40"
      ],
      "parameters": {
        "rows": [
          [
            {
              "name": "",
              "value": "",
              "type": "string"
            }
          ]
        ]
      },
      "templateParameters": {
        "columns": [
          {
            "name": "span_length",
            "type": "number"
          }
        ],
        "rows": [
          [
            "8"
          ]
        ]
      },
      "responses": {
        "rows": [
          [
            "",
            "",
            "",
            ""
          ]
        ]
      },
      "messageHandlers": {
        "rows": [
          [
            {
              "title": "",
              "message": "",
              "code": ""
            }
          ]
        ]
      },
      "shuffle": false,
      "title": "Loop",
      "_tab": "Scripts"
    },
    "40": {
      "id": "40",
      "type": "lab.flow.Sequence",
      "children": [
        "41"
      ],
      "parameters": {
        "rows": [
          [
            {
              "name": "",
              "value": "",
              "type": "string"
            }
          ]
        ]
      },
      "responses": {
        "rows": [
          [
            "",
            "",
            "",
            ""
          ]
        ]
      },
      "messageHandlers": {
        "rows": [
          [
            {
              "title": "",
              "message": "",
              "code": ""
            }
          ]
        ]
      },
      "title": "Trial sequence",
      "_tab": "Scripts"
    },
    "41": {
      "id": "41",
      "type": "lab.flow.Loop",
      "children": [
        "42"
      ],
      "templateParameters": {
        "columns": [
          {
            "name": "stimulus",
            "type": "string"
          }
        ],
        "rows": [
          [
            "1"
          ],
          [
            "2"
          ],
          [
            "3"
          ],
          [
            "4"
          ],
          [
            "5"
          ],
          [
            "6"
          ],
          [
            "7"
          ],
          [
            "8"
          ],
          [
            "9"
          ]
        ]
      },
      "responses": {
        "rows": [
          [
            "",
            "",
            "",
            ""
          ]
        ]
      },
      "messageHandlers": {
        "rows": [
          [
            {
              "title": "Generate span",
              "message": "before:prepare",
              "code": "/*\n  This code generates the stimulus sequence manually\n  from the stimuli specified in the loop content.\n  This wouldn't usually be necessary: The loop\n  can sample and shuffle stimuli itself; however,\n  doing it ourselves gives us a bit more control.\n  Specifically, it's (slightly) easier to capture \n  and store the sequence of digits (see below).\n*/\n\n// Subsample the loop parameters by drawing randomly\n// from the loop contents\nthis.options.templateParameters = this.random.sample(\n  this.options.templateParameters,\n  this.aggregateParameters.span_length\n)\n\n// Extract the presented stimuli and store them seperately,\n// as a feature of the overall trial sequence.\nthis.parent.options.parameters.span = \n  this.options.templateParameters.map(\n    function(repetition) { return repetition.stimulus }\n  )"
            }
          ]
        ]
      },
      "title": "Learning phase",
      "shuffle": false,
      "_tab": "Content",
      "parameters": {
        "rows": [
          [
            {
              "name": "",
              "value": "",
              "type": "string"
            }
          ]
        ]
      }
    },
    "42": {
      "id": "42",
      "type": "lab.html.Screen",
      "responses": {
        "rows": [
          [
            "",
            "",
            "",
            ""
          ]
        ]
      },
      "messageHandlers": {
        "rows": [
          [
            {
              "title": "Disable data logging",
              "message": "before:prepare",
              "code": "// We don't need screen-by-screen data for\n// the stimulus presentation\nthis.options.datacommit = false"
            }
          ]
        ]
      },
      "title": "Digit presentation",
      "content": "<main\n  class=\"content-horizontal-center content-vertical-center\"\n  style=\"font-size: 5rem; font-weight: bold\"\n>\n  ${ parameters.stimulus }\n</main>\n<footer>\n  Please memorize the digit presented above.\n</footer>",
      "_tab": "Scripts",
      "timeout": "1500",
      "parameters": {
        "rows": [
          [
            {
              "name": "",
              "value": "",
              "type": "string"
            }
          ]
        ]
      }
    },
    "43": {
      "id": "43",
      "type": "lab.html.Screen",
      "responses": {
        "rows": [
          [
            "continue",
            "click",
            "button#continue",
            ""
          ]
        ]
      },
      "messageHandlers": {
        "rows": [
          [
            {
              "title": "",
              "message": "",
              "code": ""
            }
          ]
        ]
      },
      "title": "Get-set-go",
      "content": "<main class=\"content-vertical-center content-horizontal-center\">\n  <div style=\"max-width: 600px\">\n    <h2>Ready?</h2>\n    <p>In a moment, we're going to show you a sequence of digits. Please try to remember them as best you can, you'll be asked to recall them immediately after in the order in which they were presented.</p>\n    <p>When you're ready, please press <kbd>Continue</kbd> below.\n  </div>\n</main>\n<footer class=\"content-horizontal-right\">\n  <button id=\"continue\">\n    Continue &rarr;\n  </button>\n</footer>",
      "_tab": "Content",
      "parameters": {
        "rows": [
          [
            {
              "name": "",
              "value": "",
              "type": "string"
            }
          ]
        ]
      },
      "skip": false,
      "timeout": ""
    },
    "45": {
      "id": "45",
      "type": "lab.html.Screen",
      "parameters": {
        "rows": [
          [
            {
              "name": "",
              "value": "",
              "type": "string"
            }
          ]
        ]
      },
      "responses": {
        "rows": [
          [
            "",
            "",
            "",
            ""
          ]
        ]
      },
      "messageHandlers": {
        "rows": [
          [
            {
              "title": "handle button responses",
              "message": "before:prepare",
              "code": "// Create an empty array that collects responses\r\nthis.data.responses = []\r\n\r\nconst updateButtons = () => {\r\n  document\r\n    .querySelectorAll('button')\r\n    .forEach(\r\n      button => button.disabled = \r\n        this.data.responses.includes(button.attributes.name.value)\r\n    )\r\n}\r\n\r\n// Setup handler for button clicks\r\nthis.options.events['click button'] = function(event) {\r\n  // Which button was clicked?\r\n  const button = event.target.attributes.name.value\r\n\r\n  // Terminate screen if participant is done,\r\n  // otherwise log response, deactivate button,\r\n  // and continue.\r\n  if (button === 'done') {\r\n    this.end('done')\r\n  } else if (button === 'undo') {\r\n    // Remove last response\r\n    this.data.responses.pop()\r\n\r\n    //Update buttons\r\n    updateButtons()\r\n  } else {\r\n    // Add response to data\r\n    this.data.responses.push(button)\r\n    \r\n     //Update buttons\r\n    updateButtons()\r\n  }\r\n}\r\n\r\n//Shuffle images\r\nthis.parameters.options = this.random.shuffle(\r\n  ['1', '2', '3', '4', '5', '6', '7', '8', '9']\r\n)"
            }
          ],
          [
            {
              "title": "code veracity of responses",
              "message": "end",
              "code": "// The response was correct if every presented stimulus\r\n// matched the corresponding response\r\n// (JavaScript, sadly, can't directly compare two arrays)\r\nthis.data.correct = this.Parameters.span.every(\r\n  (stimulus, index) => stimulus === this.data.responses[index]\r\n)\r\n// Save veracity of individual positions\r\nthis.data.correctPositions = this.parameters.span.map(\r\n  (stimulus, index) => stimulus === this.data.responses[index]\r\n)\r\n\r\nconsole.log('got here', this.data.correct)"
            }
          ]
        ]
      },
      "title": "Recall",
      "_tab": "Scripts",
      "content": "<main class=\"content-horizontal-center content-vertical-center\">\r\n  <!-- Table styles are specified in the overall study CSS,\r\n       please see study options. This screen also includes\r\n       a fair amount of logic, which is visible in the scripts\r\n       tab. Please be invited to ask the authors if you have\r\n       any questions!\r\n  -->\r\n  <table class=\"table-plain table-span-recall\">\r\n    <tr>\r\n      <td>\r\n        <button name=\"1\">1</button>\r\n      </td>\r\n      <td>\r\n        <button name=\"2\">2</button>\r\n      </td>\r\n      <td>\r\n        <button name=\"3\">3</button>\r\n      </td>\r\n      <td>\r\n        <button name=\"4\">4</button>\r\n      </td>\r\n      <td>\r\n        <button name=\"5\">5</button>\r\n      </td>\r\n      <td>\r\n        <button name=\"6\">6</button>\r\n      </td>\r\n      <td>\r\n        <button name=\"7\">7</button>\r\n      </td>\r\n      <td>\r\n        <button name=\"8\">8</button>\r\n      </td>\r\n      <td>\r\n        <button name=\"9\">9</button>\r\n      </td>\r\n    </tr>\r\n    <tr>\r\n      <td colspan=\"9\">\r\n        <button name=\"undo\">\r\n          Undo?\r\n          </button>\r\n        <button name=\"done\">Done &rarr;</button>\r\n      </td>\r\n    </tr>\r\n  </table>\r\n</main>\r\n<footer>\r\n  Please select the numbers you just saw, in the order they were presented.<br>\r\n  When you have chosen all you can recall, please click <kbd>Done</kbd> to continue.\r\n</footer>"
    },
    "root": {
      "id": "root",
      "title": "root",
      "type": "lab.flow.Sequence",
      "children": [
        "2",
        "43",
        "38",
        "45",
        "1"
      ],
      "plugins": [
        {
          "type": "lab.plugins.Metadata"
        }
      ],
      "metadata": {
        "title": "Digit span",
        "description": "This study implements a short-term memory test. Participants are asked to recall a series of digits in sequence.",
        "repository": "",
        "contributors": "Felix Henninger <mailbox@felixhenninger.com> (http://felixhenninger.com)"
      },
      "parameters": {
        "rows": [
          [
            {
              "name": "",
              "value": "",
              "type": "string"
            }
          ]
        ]
      }
    }
  },
  "version": [
    2018,
    0,
    3
  ],
  "files": {
    "files": {
      "index.html": {
        "content": "data:text/html,%3C!doctype%20html%3E%0A%3Chtml%3E%0A%3Chead%3E%0A%20%20%3Cmeta%20charset%3D%22utf-8%22%3E%0A%20%20%3Ctitle%3EExperiment%3C%2Ftitle%3E%0A%20%20%3C!--%20lab.js%20library%20and%20default%20styles%20--%3E%0A%20%20%3Cscript%20src%3D%22lib%2Flab.js%22%20data-labjs-script%3D%22library%22%3E%3C%2Fscript%3E%0A%20%20%3Cscript%20src%3D%22lib%2Flab.fallback.js%22%20data-labjs-script%3D%22fallback%22%3E%3C%2Fscript%3E%0A%20%20%3Clink%20rel%3D%22stylesheet%22%20href%3D%22lib%2Flab.css%22%3E%0A%20%20%3C!--%20study%20code%20and%20styles%20--%3E%0A%20%20%3Cscript%20defer%20src%3D%22script.js%22%3E%3C%2Fscript%3E%0A%20%20%3Clink%20rel%3D%22stylesheet%22%20href%3D%22style.css%22%3E%0A%3C%2Fhead%3E%0A%3Cbody%3E%0A%20%20%3C!--%20If%20you'd%20rather%20have%20a%20container%20with%20a%20fixed%20width%0A%20%20%20%20%20%20%20and%20variable%20height%2C%20try%20removing%20the%20fullscreen%20class%20below%20--%3E%0A%20%20%3Cdiv%20class%3D%22container%20fullscreen%22%20data-labjs-section%3D%22main%22%3E%0A%20%20%20%20%3Cmain%20class%3D%22content-vertical-center%20content-horizontal-center%22%3E%0A%20%20%20%20%20%20%3Cdiv%3E%0A%20%20%20%20%20%20%20%20%3Ch2%3ELoading%20Experiment%3C%2Fh2%3E%0A%20%20%20%20%20%20%20%20%3Cp%3EThe%20experiment%20is%20loading%20and%20should%20start%20in%20a%20few%20seconds%3C%2Fp%3E%0A%20%20%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3C%2Fmain%3E%0A%20%20%3C%2Fdiv%3E%0A%3C%2Fbody%3E%0A%3C%2Fhtml%3E%0A",
        "permanent": true
      },
      "style.css": {
        "content": "data:text/css,%2F*%20Span%20recall%20screen%20*%2F%0Atable.table-span-recall%20%7B%0A%20%20max-width%3A%20600px%3B%0A%7D%0A%0Atable.table-span-recall%20tr%3Afirst-child%20button%20%7B%0A%20%20width%3A%20100px%3B%0A%20%20height%3A%20140px%3B%0A%20%20font-size%3A%202.25rem%3B%0A%20%20%2F*%20Animate%20opacity%20*%2F%0A%20%20transition%3A%20opacity%202.25s%20ease-in-out%200%3B%0A%7D%0A%0A%0Atable.table-span-recall%20tr%3Afirst-child%20button%3Adisabled%20%7B%0A%20%20opacity%3A%200.25%3B%0A%7D",
        "permanent": true
      }
    },
    "bundledFiles": {
      "lib/lab.js": {
        "type": "application/javascript"
      },
      "lib/lab.js.map": {
        "type": "text/plain"
      },
      "lib/lab.css": {
        "type": "text/css"
      },
      "lib/loading.svg": {
        "type": "image/svg+xml"
      },
      "lib/lab.fallback.js": {
        "type": "application/javascript"
      },
      "lib/lab.legacy.js": {
        "type": "application/javascript"
      },
      "lib/lab.legacy.js.map": {
        "type": "text/plain"
      }
    }
  }
}